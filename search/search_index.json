{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dynamic Forms # What is it and what can I do with it # DynamicForms is a javascript library that handles all the interaction in forms with dynamic content in an easy and fast way. Here's some examples. Select with variable options # Visibility changes depending on fields' state # Updating rules # Much much more # Got your attention? Try it! Dynamic Forms is released as a single file . You can also find an already functioning example! Main features # Easy to use : DynamicForms works in a declarative way; no code, just a simple configuration! Simple and modern javascript : having no dependencies, you can integrate it everywhere! Automatize repetitive and boring operations : read values, fetch data making async remote calls, update fields' status, clear other fields, hide/show sections... Highly customizable : are you using an external library with custom html elements? Don't worry: you can specify your own functions to read/write data Installation # npm # 1 npm i @simomosi/dynamic-forms This will put the library under *node_modules/@simomosi/dynamic-forms/dist/dynamicforms.min.js* Yarn # 1 yarn add @simomosi/dynamic-forms This will put the library under *node_modules/@simomosi/dynamic-forms/dist/dynamicforms.min.js* Local # Download the last release from GitHub release section . Extracts files in your assets folder and load them in your project (see section below). This is not the recommended method because you can't get updates automatically. If you still want to proceed this way, it is recommended to use the minified file ( dynamicforms.min.js ) for better performance. Load the library # Choose your favorite import method Import as script tag # 1 < script src = 'your-assets-path/@simomosi/dynamic-forms/dist/dynamicforms.min.js' ></ script > Import as module (ES6 syntax) # 1 2 3 < script type = \"module\" > import * from 'your-assets-path/@simomosi/dynamic-forms/dist/dynamicforms.min.js' ; </ script > Import with CommonJs syntax # 1 const dynamicForms = require ( '@simomosi/dynamic-forms' ); Documentation # Examples of use # Minimal and serverless working example (you can copy and paste it!) Configuration # DynamicForms module (how to use the library) Form configuration (identify the form and define its behavior) Field configuration (identify form fields and define their behavior) Cool computer science stuff # DynamicForms is a particular instance of the Observer Design Pattern in which Observers and Subjects are all of the same type: html elements The function used to clear fields on cascade is the Depth-first search (DFS) used in Graph theory The library entry point ( src/index.js ) implements the Facade Design Pattern to improve software usability: it masks more complex underlying code e.g. explicit objects instantiation Disclaimer # DynamicForms is build considered some use-cases I faced in my career. If you can offer me other real use cases to test it on please let me know. If you have trouble using it open an issue, I'll be glad to help you. Suggestions are also welcome! It will be useful if you pass me some code to try: you can use tools like CodePen, PasteBin etc. Contribute # Help me develop DynamicForms! Remember to work on dist/dynamicforms.js file to access source code (or import the src/index.js file as a module if you prefer). Useful commands: yarn build:dev - Build the project in development mode : this enables dev tools and keeps references to original source code; you can use it with --watch flag yarn build:prod - Build the project in production mode : this improves performance and security (hide all source code references); you can use it with --watch flag yarn build - Build both dev file and prod file yarn build:diagrams - Updates classdiagram.svg from classdiagram.mmd Please, update also the documentation if you can. Here is the UML Class Diagram to help you understand the project structure. Thank you very much for your support \u2764 ToDo List # Implement 'forms configurations': instantiate the DynamicForm one time , and specify different sets of rules to switch on. Example: if (A is Europe) then B updates C; if (A is America) then B updates D. Apply listener to fields container to use dynamicForms on dynamic collections of checkbox/radio fields","title":"Home"},{"location":"#dynamic-forms","text":"","title":"Dynamic Forms"},{"location":"#what-is-it-and-what-can-i-do-with-it","text":"DynamicForms is a javascript library that handles all the interaction in forms with dynamic content in an easy and fast way. Here's some examples.","title":"What is it and what can I do with it"},{"location":"#select-with-variable-options","text":"","title":"Select with variable options"},{"location":"#visibility-changes-depending-on-fields-state","text":"","title":"Visibility changes depending on fields' state"},{"location":"#updating-rules","text":"","title":"Updating rules"},{"location":"#much-much-more","text":"Got your attention? Try it! Dynamic Forms is released as a single file . You can also find an already functioning example!","title":"Much much more"},{"location":"#main-features","text":"Easy to use : DynamicForms works in a declarative way; no code, just a simple configuration! Simple and modern javascript : having no dependencies, you can integrate it everywhere! Automatize repetitive and boring operations : read values, fetch data making async remote calls, update fields' status, clear other fields, hide/show sections... Highly customizable : are you using an external library with custom html elements? Don't worry: you can specify your own functions to read/write data","title":"Main features"},{"location":"#installation","text":"","title":"Installation"},{"location":"#npm","text":"1 npm i @simomosi/dynamic-forms This will put the library under *node_modules/@simomosi/dynamic-forms/dist/dynamicforms.min.js*","title":"npm"},{"location":"#yarn","text":"1 yarn add @simomosi/dynamic-forms This will put the library under *node_modules/@simomosi/dynamic-forms/dist/dynamicforms.min.js*","title":"Yarn"},{"location":"#local","text":"Download the last release from GitHub release section . Extracts files in your assets folder and load them in your project (see section below). This is not the recommended method because you can't get updates automatically. If you still want to proceed this way, it is recommended to use the minified file ( dynamicforms.min.js ) for better performance.","title":"Local"},{"location":"#load-the-library","text":"Choose your favorite import method","title":"Load the library"},{"location":"#import-as-script-tag","text":"1 < script src = 'your-assets-path/@simomosi/dynamic-forms/dist/dynamicforms.min.js' ></ script >","title":"Import as script tag"},{"location":"#import-as-module-es6-syntax","text":"1 2 3 < script type = \"module\" > import * from 'your-assets-path/@simomosi/dynamic-forms/dist/dynamicforms.min.js' ; </ script >","title":"Import as module (ES6 syntax)"},{"location":"#import-with-commonjs-syntax","text":"1 const dynamicForms = require ( '@simomosi/dynamic-forms' );","title":"Import with CommonJs syntax"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#examples-of-use","text":"Minimal and serverless working example (you can copy and paste it!)","title":"Examples of use"},{"location":"#configuration","text":"DynamicForms module (how to use the library) Form configuration (identify the form and define its behavior) Field configuration (identify form fields and define their behavior)","title":"Configuration"},{"location":"#cool-computer-science-stuff","text":"DynamicForms is a particular instance of the Observer Design Pattern in which Observers and Subjects are all of the same type: html elements The function used to clear fields on cascade is the Depth-first search (DFS) used in Graph theory The library entry point ( src/index.js ) implements the Facade Design Pattern to improve software usability: it masks more complex underlying code e.g. explicit objects instantiation","title":"Cool computer science stuff"},{"location":"#disclaimer","text":"DynamicForms is build considered some use-cases I faced in my career. If you can offer me other real use cases to test it on please let me know. If you have trouble using it open an issue, I'll be glad to help you. Suggestions are also welcome! It will be useful if you pass me some code to try: you can use tools like CodePen, PasteBin etc.","title":"Disclaimer"},{"location":"#contribute","text":"Help me develop DynamicForms! Remember to work on dist/dynamicforms.js file to access source code (or import the src/index.js file as a module if you prefer). Useful commands: yarn build:dev - Build the project in development mode : this enables dev tools and keeps references to original source code; you can use it with --watch flag yarn build:prod - Build the project in production mode : this improves performance and security (hide all source code references); you can use it with --watch flag yarn build - Build both dev file and prod file yarn build:diagrams - Updates classdiagram.svg from classdiagram.mmd Please, update also the documentation if you can. Here is the UML Class Diagram to help you understand the project structure. Thank you very much for your support \u2764","title":"Contribute"},{"location":"#todo-list","text":"Implement 'forms configurations': instantiate the DynamicForm one time , and specify different sets of rules to switch on. Example: if (A is Europe) then B updates C; if (A is America) then B updates D. Apply listener to fields container to use dynamicForms on dynamic collections of checkbox/radio fields","title":"ToDo List"},{"location":"dynamic-forms-module/","text":"DynamicForms module # How to use it # This document describes the dynamicForms module properties. This module let you instantiate and work easily with the whole DynamicForms library. You only need to use properties declared in this module and nothing else. Module import example: 1 < script src = './dist/dynamicforms.min.js' ></ script > Module use example: 1 let form = dynamicForms . makeForm ( formConfig ); Properties # makeForm (formConfiguration) # Istantiates a DynamicForm. Parameters - { object } formConfiguration : the form configuration Returns - { DynamicForm } a DynamicForm instance getForm (id) # Returns a DynamicForm instance corresponding to the form id, if it exists. Parameters - { string } id : the form id Returns - { DynamicForm | null } the DynamicForm instance or null if it does not exists","title":"How to use it"},{"location":"dynamic-forms-module/#dynamicforms-module","text":"","title":"DynamicForms module"},{"location":"dynamic-forms-module/#how-to-use-it","text":"This document describes the dynamicForms module properties. This module let you instantiate and work easily with the whole DynamicForms library. You only need to use properties declared in this module and nothing else. Module import example: 1 < script src = './dist/dynamicforms.min.js' ></ script > Module use example: 1 let form = dynamicForms . makeForm ( formConfig );","title":"How to use it"},{"location":"dynamic-forms-module/#properties","text":"","title":"Properties"},{"location":"dynamic-forms-module/#makeform-formconfiguration","text":"Istantiates a DynamicForm. Parameters - { object } formConfiguration : the form configuration Returns - { DynamicForm } a DynamicForm instance","title":"makeForm (formConfiguration)"},{"location":"dynamic-forms-module/#getform-id","text":"Returns a DynamicForm instance corresponding to the form id, if it exists. Parameters - { string } id : the form id Returns - { DynamicForm | null } the DynamicForm instance or null if it does not exists","title":"getForm (id)"},{"location":"configurations/field-configuration/","text":"Field configuration # This document describes a single field configuration. The field configuration must be included in the fields collection in the form configuration . Here's a complete single field configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 let fieldConfiguration = { 'name' : 'fieldName' , 'io' : { // Customize field input/output 'event' : 'change' , 'get' : ( htmlElement ) => { }, 'set' : ( htmlElement , value ) => { }, }, 'fetch' : { // Remote call options 'method' : 'GET' , 'makeUrl' : ( data ) => { }, 'makeBody' : ( data ) => { }, // JSON.stringify, formData, text... 'fullFetchConfig' : {}, // Fetch complete configuration }, 'behavior' : { 'clear' : ( htmlElement ) => { }, // Clear field from its content 'beforeUpdate' : ( htmlElement , data , subjectName ) => { return true ; }, // Executed before the remote call. Return false to block the update 'updateStatus' : ( htmlElement , data , subjectName ) => { }, 'afterUpdate' : ( htmlElement , data , subjectName ) => { } // Executed after the remote call }, 'dropdown' : { // Only for dropdown elements 'postProcessData' : ( htmlElement , data ) => { }, // Process data retrieved by remote call 'saveData' : ( htmlElement , data ) => { }, // Save data in html (es: <option value=\"value\">'text'</option>) 'clearOnParentVoid' : true , // True (default) to clear field content when subject is empty; false to trigger a remote call }, 'checkbox' : { // Only for checkbox elements 'booleanValue' : true // True (default) to get element's value as boolean, based on the checked property; false to get the value property } }; name * # The html element name. Type: string . required io # Object which groups properties related to field input and output. event # The html event which symbolize the Subject's status change (e.g. change for a dropdown, click for a checkbox...). It is used to put an event listener which will notify Subject's Observers. Type: string . Default value: change . get (htmlElement) # Function to fetch the html element's value. Useful for custom html elements. Parameters - { node | NodeList } htmlElement : the html node Returns - { string } the field content set (htmlElement) # Function to set the html element's value. Useful for custom html elements. Parameters - { node | NodeList } htmlElement : the html node - { mixed } value : the field's new value Returns - { void } fetch * # Object which groups properties related to remote calls. Available only for DynamicDropdown instances (select-option like fields). Required only if the dropdown element is an observer (it will be updated for every observed subject change), unless you specify a new updateStatus function. method # It's the http request method (or verb). Type: string . Default value: GET makeUrl (data) * # A function to generate the url to make the remote call to. required Parameters - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config Returns - { string } The remote call url makeBody (data) # A function to generate the remote call body in the desired method (e.g. JSON.stringify, FormData...). It's not necessary if the remote call uses the GET request method (parameters need to be placed in the url). Parameters - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config Returns - { object } The remote call body fullFetchConfig (data) # A function to generate the complete Fetch configuration for remote calls. If this function is defined, the updateStatus default function will ignore fetch.method property and fetch.makeBody function. Parameters - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config Returns - { object } The complete Fetch configuration behavior # Object which groups properties related to field behavior. clear (htmlElement) # Function to unset the field's current value. Sometimes it is used to clear the field from its content (for input and dropdown types). Parameters - { node | NodeList } htmlElement : the html node Returns - { void } beforeUpdate (htmlElement, data, subjectName) # Method called before triggering the field's status update. If return value is false , the update is aborted. Default behavior: nothing. For DynamicDropdown elements it clear the field content if clearOnParentVoid conditions are satisfied. Parameters - { node | NodeList } htmlElement : the html node - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config - { string }: subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { boolean } false to abort the update, true otherwise updateStatus (htmlElement, data, subjectName) # Method to update the field status. It is useful to update the field's attributes ( display , disabled ...) and content. Default behavior: nothing. For DynamicDropdown elements it makes a remote call (using fetch ), retrieves new date and saves it as select new content ( option ). Parameters - { node | NodeList } htmlElement : the html node - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config - { string }: subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { void } afterUpdate (htmlElement, data, subjectName) # Method called after triggering the field's status update. Parameters - { node | NodeList } htmlElement : the html node - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config - { string }: subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { boolean } (currently) unused dropdown # Object which groups properties related to select-option elements. postProcessData (htmlElement, data) # Function to process data retrieved by remote call. It is useful for filtering/ordering data. Parameters - { node | NodeList } htmlElement : the html node - { JSON | object[] } data : data retrieved from the remote call Returns - { JSON | object[] } post-processed data saveData (htmlElement, data) # Function to phisically save (post-processed) data retrieved by a remote call as html. Default behavior: saves data as option html elements using value and test properties. Parameters - { node | NodeList } htmlElement : the html node where data will be saved - { JSON | object[] } data : data retrieved from the remote call Returns - { JSON | object[] } post-processed data (not used) clearOnParentVoid # Property which (when true ) tells to clear field content when subject value is empty instead of triggering a remote call (when false ). Type: boolean . Default value: true . checkbox # Object which groups properties related to select-option elements. booleanValue # Property which tells if the field's value is boolean . When true the field considers its value as boolean , based on the html checked attribute; when false it considers its value as string , based on the value attribute. Type: boolean . Default value: true .","title":"Fields configuration"},{"location":"configurations/field-configuration/#field-configuration","text":"This document describes a single field configuration. The field configuration must be included in the fields collection in the form configuration . Here's a complete single field configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 let fieldConfiguration = { 'name' : 'fieldName' , 'io' : { // Customize field input/output 'event' : 'change' , 'get' : ( htmlElement ) => { }, 'set' : ( htmlElement , value ) => { }, }, 'fetch' : { // Remote call options 'method' : 'GET' , 'makeUrl' : ( data ) => { }, 'makeBody' : ( data ) => { }, // JSON.stringify, formData, text... 'fullFetchConfig' : {}, // Fetch complete configuration }, 'behavior' : { 'clear' : ( htmlElement ) => { }, // Clear field from its content 'beforeUpdate' : ( htmlElement , data , subjectName ) => { return true ; }, // Executed before the remote call. Return false to block the update 'updateStatus' : ( htmlElement , data , subjectName ) => { }, 'afterUpdate' : ( htmlElement , data , subjectName ) => { } // Executed after the remote call }, 'dropdown' : { // Only for dropdown elements 'postProcessData' : ( htmlElement , data ) => { }, // Process data retrieved by remote call 'saveData' : ( htmlElement , data ) => { }, // Save data in html (es: <option value=\"value\">'text'</option>) 'clearOnParentVoid' : true , // True (default) to clear field content when subject is empty; false to trigger a remote call }, 'checkbox' : { // Only for checkbox elements 'booleanValue' : true // True (default) to get element's value as boolean, based on the checked property; false to get the value property } };","title":"Field configuration"},{"location":"configurations/field-configuration/#name","text":"The html element name. Type: string . required","title":"name*"},{"location":"configurations/field-configuration/#io","text":"Object which groups properties related to field input and output.","title":"io"},{"location":"configurations/field-configuration/#event","text":"The html event which symbolize the Subject's status change (e.g. change for a dropdown, click for a checkbox...). It is used to put an event listener which will notify Subject's Observers. Type: string . Default value: change .","title":"event"},{"location":"configurations/field-configuration/#get-htmlelement","text":"Function to fetch the html element's value. Useful for custom html elements. Parameters - { node | NodeList } htmlElement : the html node Returns - { string } the field content","title":"get (htmlElement)"},{"location":"configurations/field-configuration/#set-htmlelement","text":"Function to set the html element's value. Useful for custom html elements. Parameters - { node | NodeList } htmlElement : the html node - { mixed } value : the field's new value Returns - { void }","title":"set (htmlElement)"},{"location":"configurations/field-configuration/#fetch","text":"Object which groups properties related to remote calls. Available only for DynamicDropdown instances (select-option like fields). Required only if the dropdown element is an observer (it will be updated for every observed subject change), unless you specify a new updateStatus function.","title":"fetch*"},{"location":"configurations/field-configuration/#method","text":"It's the http request method (or verb). Type: string . Default value: GET","title":"method"},{"location":"configurations/field-configuration/#makeurl-data","text":"A function to generate the url to make the remote call to. required Parameters - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config Returns - { string } The remote call url","title":"makeUrl (data)*"},{"location":"configurations/field-configuration/#makebody-data","text":"A function to generate the remote call body in the desired method (e.g. JSON.stringify, FormData...). It's not necessary if the remote call uses the GET request method (parameters need to be placed in the url). Parameters - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config Returns - { object } The remote call body","title":"makeBody (data)"},{"location":"configurations/field-configuration/#fullfetchconfig-data","text":"A function to generate the complete Fetch configuration for remote calls. If this function is defined, the updateStatus default function will ignore fetch.method property and fetch.makeBody function. Parameters - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config Returns - { object } The complete Fetch configuration","title":"fullFetchConfig (data)"},{"location":"configurations/field-configuration/#behavior","text":"Object which groups properties related to field behavior.","title":"behavior"},{"location":"configurations/field-configuration/#clear-htmlelement","text":"Function to unset the field's current value. Sometimes it is used to clear the field from its content (for input and dropdown types). Parameters - { node | NodeList } htmlElement : the html node Returns - { void }","title":"clear (htmlElement)"},{"location":"configurations/field-configuration/#beforeupdate-htmlelement-data-subjectname","text":"Method called before triggering the field's status update. If return value is false , the update is aborted. Default behavior: nothing. For DynamicDropdown elements it clear the field content if clearOnParentVoid conditions are satisfied. Parameters - { node | NodeList } htmlElement : the html node - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config - { string }: subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { boolean } false to abort the update, true otherwise","title":"beforeUpdate (htmlElement, data, subjectName)"},{"location":"configurations/field-configuration/#updatestatus-htmlelement-data-subjectname","text":"Method to update the field status. It is useful to update the field's attributes ( display , disabled ...) and content. Default behavior: nothing. For DynamicDropdown elements it makes a remote call (using fetch ), retrieves new date and saves it as select new content ( option ). Parameters - { node | NodeList } htmlElement : the html node - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config - { string }: subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { void }","title":"updateStatus (htmlElement, data, subjectName)"},{"location":"configurations/field-configuration/#afterupdate-htmlelement-data-subjectname","text":"Method called after triggering the field's status update. Parameters - { node | NodeList } htmlElement : the html node - { JSON } data : data obtained from additionalData and externalData functions in Update Rule Config - { string }: subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { boolean } (currently) unused","title":"afterUpdate (htmlElement, data, subjectName)"},{"location":"configurations/field-configuration/#dropdown","text":"Object which groups properties related to select-option elements.","title":"dropdown"},{"location":"configurations/field-configuration/#postprocessdata-htmlelement-data","text":"Function to process data retrieved by remote call. It is useful for filtering/ordering data. Parameters - { node | NodeList } htmlElement : the html node - { JSON | object[] } data : data retrieved from the remote call Returns - { JSON | object[] } post-processed data","title":"postProcessData (htmlElement, data)"},{"location":"configurations/field-configuration/#savedata-htmlelement-data","text":"Function to phisically save (post-processed) data retrieved by a remote call as html. Default behavior: saves data as option html elements using value and test properties. Parameters - { node | NodeList } htmlElement : the html node where data will be saved - { JSON | object[] } data : data retrieved from the remote call Returns - { JSON | object[] } post-processed data (not used)","title":"saveData (htmlElement, data)"},{"location":"configurations/field-configuration/#clearonparentvoid","text":"Property which (when true ) tells to clear field content when subject value is empty instead of triggering a remote call (when false ). Type: boolean . Default value: true .","title":"clearOnParentVoid"},{"location":"configurations/field-configuration/#checkbox","text":"Object which groups properties related to select-option elements.","title":"checkbox"},{"location":"configurations/field-configuration/#booleanvalue","text":"Property which tells if the field's value is boolean . When true the field considers its value as boolean , based on the html checked attribute; when false it considers its value as string , based on the value attribute. Type: boolean . Default value: true .","title":"booleanValue"},{"location":"configurations/form-configuration/","text":"Form configuration # This document describes the complete form configuration with focus on each property. The configuration is written client side and passed to the correct method of dynamicForms module for the form instantiation. Glossary: Subject : the subject is the entity who changed Observer : the observer is an entity who is notified by the subject change Here's the complete form configuration: 1 2 3 4 5 6 7 8 9 10 11 let formConfiguration = { 'id' : 'formId' , 'debug' : true , 'behavior' : { 'beforeUpdate' : ( subjectName ) => { }, // Executed before the update related events. Return false to block all updates 'afterUpdate' : ( subjectName ) => { }, // Executed after the update related events }, 'fields' : [], // Collection of fields objects 'rules' : [], // Collection of rules objects 'init' : [] // Collection of init objects }; id * # The form id. Just the plain text, no '#'. Type: string . required debug # A flag to activate the debug mode. Type: boolean . behavior # Object which groups properties related to form behavior (e.g. what to do before or after an update event). beforeUpdate (subjectName) # Method called after a subject registers an update, but before triggering the update on the whole form. Useful to show a loader during the fields update. Parameters - { string | null } subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { bool } false to abort the update, true otherwise afterUpdate (subjectName) # Method called after the form update, and in particular after all involved form's fields have completed their update. Useful to hide a loader after the fields update. Parameters - { string | null } subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { void } fields * # A collection of Fields configurations. Include here all fields involved in the DynamicForm behavior (get/set/update operations). Fields with no dynamic behavior may not be included. required See Field configuration . rules * # A collection of Update Rules configurations. Include here all rules like \"if field A changes, trigger the update of fields B and C\". required See Update Rule configuration . init # A collection of Init Rules configurations. Include here all fields which will be updated during the DynamicForm instantiation. See Init Rule configuration .","title":"Form configuration"},{"location":"configurations/form-configuration/#form-configuration","text":"This document describes the complete form configuration with focus on each property. The configuration is written client side and passed to the correct method of dynamicForms module for the form instantiation. Glossary: Subject : the subject is the entity who changed Observer : the observer is an entity who is notified by the subject change Here's the complete form configuration: 1 2 3 4 5 6 7 8 9 10 11 let formConfiguration = { 'id' : 'formId' , 'debug' : true , 'behavior' : { 'beforeUpdate' : ( subjectName ) => { }, // Executed before the update related events. Return false to block all updates 'afterUpdate' : ( subjectName ) => { }, // Executed after the update related events }, 'fields' : [], // Collection of fields objects 'rules' : [], // Collection of rules objects 'init' : [] // Collection of init objects };","title":"Form configuration"},{"location":"configurations/form-configuration/#id","text":"The form id. Just the plain text, no '#'. Type: string . required","title":"id*"},{"location":"configurations/form-configuration/#debug","text":"A flag to activate the debug mode. Type: boolean .","title":"debug"},{"location":"configurations/form-configuration/#behavior","text":"Object which groups properties related to form behavior (e.g. what to do before or after an update event).","title":"behavior"},{"location":"configurations/form-configuration/#beforeupdate-subjectname","text":"Method called after a subject registers an update, but before triggering the update on the whole form. Useful to show a loader during the fields update. Parameters - { string | null } subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { bool } false to abort the update, true otherwise","title":"beforeUpdate (subjectName)"},{"location":"configurations/form-configuration/#afterupdate-subjectname","text":"Method called after the form update, and in particular after all involved form's fields have completed their update. Useful to hide a loader after the fields update. Parameters - { string | null } subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { void }","title":"afterUpdate (subjectName)"},{"location":"configurations/form-configuration/#fields","text":"A collection of Fields configurations. Include here all fields involved in the DynamicForm behavior (get/set/update operations). Fields with no dynamic behavior may not be included. required See Field configuration .","title":"fields*"},{"location":"configurations/form-configuration/#rules","text":"A collection of Update Rules configurations. Include here all rules like \"if field A changes, trigger the update of fields B and C\". required See Update Rule configuration .","title":"rules*"},{"location":"configurations/form-configuration/#init","text":"A collection of Init Rules configurations. Include here all fields which will be updated during the DynamicForm instantiation. See Init Rule configuration .","title":"init"},{"location":"configurations/rules/","text":"Rules # Rules to manage fields update and instantiation. Update Rule configuration # 1 2 3 4 5 6 let updateRuleConfiguration = { 'name' : 'fieldName' , 'update' : [], 'additionalData' : [], // Array of field names 'externalData' : ( data , subjectName ) => { } // Function which returns a json of data }; name * # The field name inside the form. additionalData # A collection of other fields name whose value will be automatically fetched and used in the field's update function. externalData (data, subjectName) # A function to collect other data used in the update function but external to the form (e.g. a timestamp). Parameters - { object } data : data obtained from the additional data function - { string | null } subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { object } An object with external data values ( key-value format) Init Rule configuration # 1 2 3 4 5 let initRuleConfiguration = { 'name' : 'fieldName' , 'additionalData' : [], // Array of field names 'externalData' : ( data , subjectName ) => { } // Function which returns a json of data }; name * # The field name inside the form. It's the same as the analogous property in Update Rule configuration . additionalData # It's the same as the analogous property in Update Rule configuration . externalData (data, subjectName) # It's the same as the analogous property in Update Rule configuration .","title":"Rules"},{"location":"configurations/rules/#rules","text":"Rules to manage fields update and instantiation.","title":"Rules"},{"location":"configurations/rules/#update-rule-configuration","text":"1 2 3 4 5 6 let updateRuleConfiguration = { 'name' : 'fieldName' , 'update' : [], 'additionalData' : [], // Array of field names 'externalData' : ( data , subjectName ) => { } // Function which returns a json of data };","title":"Update Rule configuration"},{"location":"configurations/rules/#name","text":"The field name inside the form.","title":"name*"},{"location":"configurations/rules/#additionaldata","text":"A collection of other fields name whose value will be automatically fetched and used in the field's update function.","title":"additionalData"},{"location":"configurations/rules/#externaldata-data-subjectname","text":"A function to collect other data used in the update function but external to the form (e.g. a timestamp). Parameters - { object } data : data obtained from the additional data function - { string | null } subjectName : the name of the subject who triggered the update. It can be null if the update is triggered manually Returns - { object } An object with external data values ( key-value format)","title":"externalData (data, subjectName)"},{"location":"configurations/rules/#init-rule-configuration","text":"1 2 3 4 5 let initRuleConfiguration = { 'name' : 'fieldName' , 'additionalData' : [], // Array of field names 'externalData' : ( data , subjectName ) => { } // Function which returns a json of data };","title":"Init Rule configuration"},{"location":"configurations/rules/#name_1","text":"The field name inside the form. It's the same as the analogous property in Update Rule configuration .","title":"name*"},{"location":"configurations/rules/#additionaldata_1","text":"It's the same as the analogous property in Update Rule configuration .","title":"additionalData"},{"location":"configurations/rules/#externaldata-data-subjectname_1","text":"It's the same as the analogous property in Update Rule configuration .","title":"externalData (data, subjectName)"},{"location":"examples/minimal-example/","text":"1. Minimal and serverless working example # This example shows how to create a Dynamic Form with 2 dropdowns (select-option). According to the Init Rule , the first dropdown loads its content from a remote call during the form initialization. According to the Update Rule , selecting a value in the first dropdown triggers the loading of the second dropdown filtered content. Here follows the code. It's ready to use! 1.1. Create the form # 1 2 3 4 5 6 7 8 9 10 11 < form id = 'jsonPlaceholder' > < label for = \"user\" > Users </ label > < select id = \"user\" name = 'user' > < option value = \"\" selected ></ option > </ select > < br /> < label for = \"post\" > Posts </ label > < select id = \"post\" name = 'post' > < option value = \"\" selected ></ option > </ select > </ form > Note: both fields have no data. 1.2. Import the sources # Use the correct path according to your project's structure. 1 < script src = './dist/dynamicforms.js' ></ script > 1.3. Write the form configuration. # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 let formConfig = { 'id' : 'jsonPlaceholder' , // form id 'debug' : true , // prints some info 'fields' : [ // list of involved fields { 'name' : 'user' , // field name 'fetch' : { // function to generate an url for remote calls 'makeUrl' : ( data ) => `https://jsonplaceholder.typicode.com/users` , }, 'behavior' : { // function to postprocess data and adapt it according to our needs 'postProcessData' : ( htmlElement , data ) => { return data . map ( x => { return { 'value' : x . id , 'text' : x . username }; }) . sort (( a , b ) => { return a . text > b . text }); } } }, { 'name' : 'post' , 'fetch' : { 'makeUrl' : ( data ) => `https://jsonplaceholder.typicode.com/posts?userId= ${ data . user } ` , }, 'behavior' : { 'postProcessData' : ( htmlElement , data ) => { return data . map ( x => { return { 'value' : x . id , 'text' : x . title }; }); } } } ], 'rules' : [ // list of Update Rules // a change on 'user' updates the 'post' field content { 'name' : 'user' , 'update' : [ 'post' ], } ], 'init' : [ // list of Init Rules // the 'user' field loads its content remotely during the form initialization { 'name' : 'user' , } ] }; 1.4. Initialize the DynamicForm # 1 let form = dynamicForms . makeForm ( formConfig ); Done . 4 steps. Easy. Now the user field initializes itself with a remote call (see the Init Rule ); on every changes it updates the post field data (see the Update Rule ).","title":"Example"},{"location":"examples/minimal-example/#1-minimal-and-serverless-working-example","text":"This example shows how to create a Dynamic Form with 2 dropdowns (select-option). According to the Init Rule , the first dropdown loads its content from a remote call during the form initialization. According to the Update Rule , selecting a value in the first dropdown triggers the loading of the second dropdown filtered content. Here follows the code. It's ready to use!","title":"1. Minimal and serverless working example"},{"location":"examples/minimal-example/#11-create-the-form","text":"1 2 3 4 5 6 7 8 9 10 11 < form id = 'jsonPlaceholder' > < label for = \"user\" > Users </ label > < select id = \"user\" name = 'user' > < option value = \"\" selected ></ option > </ select > < br /> < label for = \"post\" > Posts </ label > < select id = \"post\" name = 'post' > < option value = \"\" selected ></ option > </ select > </ form > Note: both fields have no data.","title":"1.1. Create the form"},{"location":"examples/minimal-example/#12-import-the-sources","text":"Use the correct path according to your project's structure. 1 < script src = './dist/dynamicforms.js' ></ script >","title":"1.2. Import the sources"},{"location":"examples/minimal-example/#13-write-the-form-configuration","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 let formConfig = { 'id' : 'jsonPlaceholder' , // form id 'debug' : true , // prints some info 'fields' : [ // list of involved fields { 'name' : 'user' , // field name 'fetch' : { // function to generate an url for remote calls 'makeUrl' : ( data ) => `https://jsonplaceholder.typicode.com/users` , }, 'behavior' : { // function to postprocess data and adapt it according to our needs 'postProcessData' : ( htmlElement , data ) => { return data . map ( x => { return { 'value' : x . id , 'text' : x . username }; }) . sort (( a , b ) => { return a . text > b . text }); } } }, { 'name' : 'post' , 'fetch' : { 'makeUrl' : ( data ) => `https://jsonplaceholder.typicode.com/posts?userId= ${ data . user } ` , }, 'behavior' : { 'postProcessData' : ( htmlElement , data ) => { return data . map ( x => { return { 'value' : x . id , 'text' : x . title }; }); } } } ], 'rules' : [ // list of Update Rules // a change on 'user' updates the 'post' field content { 'name' : 'user' , 'update' : [ 'post' ], } ], 'init' : [ // list of Init Rules // the 'user' field loads its content remotely during the form initialization { 'name' : 'user' , } ] };","title":"1.3. Write the form configuration."},{"location":"examples/minimal-example/#14-initialize-the-dynamicform","text":"1 let form = dynamicForms . makeForm ( formConfig ); Done . 4 steps. Easy. Now the user field initializes itself with a remote call (see the Init Rule ); on every changes it updates the post field data (see the Update Rule ).","title":"1.4. Initialize the DynamicForm"}]}